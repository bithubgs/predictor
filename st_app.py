import streamlit as st
import pandas as pd
import numpy as np
import yfinance as yf
from datetime import datetime, timedelta
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import requests
import math
from scipy import stats
import warnings
import time # Added for auto-refresh in live mode
import pytz # Import pytz for timezone handling

warnings.filterwarnings('ignore')

# Georgian localization
st.set_page_config(
    page_title="·Éô·É†·Éò·Éû·É¢·Éù ·É™·Éò·Éô·Éö·Éî·Éë·Éò·É° ·Éê·Éú·Éê·Éö·Éò·Éñ·Éò",
    page_icon="‚Çø",
    layout="wide", # Keep wide layout for better use of space on larger screens
    initial_sidebar_state="expanded"
)

# Custom CSS for a more refined look and compactness
st.markdown("""
<style>
    /* General font size reduction for overall compactness */
    html, body, .stApp {
        font-size: 12px; /* Base font size */
    }
    /* Headers - slightly smaller for compactness */
    h1 {
        font-size: 2.0em; /* Smaller h1 */
        margin-bottom: 0.5em; /* Reduce space below headers */
    }
    h2 {
        font-size: 1.5em; /* Smaller h2 */
        margin-top: 1em; /* Adjust space above headers */
        margin-bottom: 0.5em;
    }
    h3 {
        font-size: 1.2em; /* Smaller h3 */
        margin-top: 0.8em;
        margin-bottom: 0.4em;
    }
    /* Streamlit specific elements for compactness */
    .st-emotion-cache-1r6n02x { /* Target for st.metric container */
        padding: 0.5em; /* Further reduced padding for metrics */
        margin-bottom: 0.5em; /* Further reduced margin below metrics */
        border-radius: 8px; /* Slightly rounded corners */
        background-color: white; /* Clean background */
        box-shadow: 0 1px 3px rgba(0,0,0,0.1); /* Subtle shadow */
        min-width: 100px; /* Ensure a minimum width for metrics */
    }
    .st-emotion-cache-1r6n02x div[data-testid="stMetricValue"] {
        font-size: 1.3em; /* Adjusted metric value font size */
        font-weight: bold;
        color: #004d40; /* Dark teal for values */
    }
    .st-emotion-cache-1r6n02x div[data-testid="stMetricLabel"] {
        font-size: 0.7em; /* Adjusted metric label font size */
        color: #555555; /* Grey for labels */
    }
    .st-emotion-cache-1r6n02x div[data-testid="stMetricDelta"] {
        font-size: 0.8em; /* Delta font size */
    }
    /* Buttons styling for better fit and appearance */
    .stButton>button {
        background-color: #00796b; /* Teal button background */
        color: white;
        border-radius: 8px; /* Rounded corners */
        border: none;
        padding: 0.6em 1em; /* Reduced padding for buttons */
        font-size: 0.95em; /* Slightly smaller button text */
        transition: background-color 0.3s ease;
        width: 100%; /* Make buttons fill width */
        margin-bottom: 0.4em; /* Space between buttons */
    }
    .stButton>button:hover {
        background-color: #004d40; /* Darker teal on hover */
        color: white;
    }
    /* Input fields (selectbox, text_input, number_input) */
    .stTextInput>div>div>input, .stSelectbox>div>div>div>div, .stNumberInput>div>div>input {
        border-radius: 8px;
        border: 1px solid #cccccc;
        padding: 0.3em 0.8em; /* Adjusted padding */
        font-size: 0.7em; /* Smaller font in inputs */
    }
    /* Ensure selectbox selected value is clearly visible */
    div[data-testid="stSelectbox"] div[data-testid="stSelectboxSelectedValue"] {
        color: #333333 !important; /* Dark grey for better visibility */
        font-weight: bold; /* Make it bold */
        white-space: nowrap; /* Keep text on a single line */
        overflow: visible !important; /* Allow text to overflow if necessary */
        text-overflow: clip !important; /* Prevent ellipsis if overflow is visible */
        flex-grow: 1; /* Allow it to grow and take available space */
        min-width: 0; /* Allow it to shrink, but overflow: visible should prevent clipping */
        padding-right: 5px; /* Add some padding to prevent text from touching the arrow */
    }
    /* Adjust the button container of the selectbox to ensure space for the selected value and arrow */
    .stSelectbox > div > div > div[role="button"] {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 5px; /* Small gap between text and arrow */
        min-height: 2.5em; /* Ensure sufficient height */
        /* Remove overflow: hidden and text-overflow: ellipsis from here */
        /* Let the inner text element manage its own overflow if it's too long */
    }

    /* General text and markdown */
    .st-emotion-cache-13ln4gm { /* Streamlit markdown text */
        font-size: 0.9em;
    }
    /* Sidebar adjustments */
    .st-emotion-cache-vk330y { /* Sidebar header */
        font-size: 1.8em;
        color: #004d40;
    }
    .st-emotion-cache-10qj072 { /* Sidebar elements padding */
        padding-top: 0.4rem; /* Reduced padding */
        padding-bottom: 0.4rem;
    }
    /* Plotly chart container styling */
    .stPlotlyChart {
        padding: 10px;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-bottom: 1em;
    }
    /* Adjust column padding for tighter layout */
    .st-emotion-cache-uf99v8 { /* Column container */
        padding-left: 0.4rem; /* Reduced horizontal padding */
        padding-right: 0.4rem;
    }
    /* Table/DataFrame styling */
    .stDataFrame {
        border-radius: 10px;
        overflow: hidden; /* Ensures rounded corners apply to content */
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        font-size: 0.85em; /* Smaller font for table content */
    }
    .stDataFrame table th { /* Table headers */
        font-size: 0.9em;
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state
if 'portfolio' not in st.session_state:
    st.session_state.portfolio = {}
if 'live_mode' not in st.session_state:
    st.session_state.live_mode = False
if 'page' not in st.session_state: # Initialize page state for new button navigation
    st.session_state.page = "üìà ·É™·Éò·Éô·Éö·Éî·Éë·Éò·É° ·Éê·Éú·Éê·Éö·Éò·Éñ·Éò"

# Bitcoin Halving Dates
# Ensure halving dates are timezone-aware (UTC) from the start for consistency
HALVING_DATES = {
    'halving_1': datetime(2012, 11, 28, tzinfo=pytz.utc),
    'halving_2': datetime(2016, 7, 9, tzinfo=pytz.utc),
    'halving_3': datetime(2020, 5, 11, tzinfo=pytz.utc),
    'halving_4': datetime(2024, 4, 20, tzinfo=pytz.utc)  # Next estimated halving
}

# Helper functions
@st.cache_data(ttl=300)  # Cache for 5 minutes for live mode
def get_crypto_data(symbol, period="2y"):
    """Fetch cryptocurrency data from Yahoo Finance"""
    with st.spinner(f"·Éõ·Éù·Éú·Éê·É™·Éî·Éõ·Éî·Éë·Éò·É° ·É©·Éê·É¢·Éï·Éò·É†·Éó·Éï·Éê {symbol}-·Éò·É°·Éó·Éï·Éò·É°..."):
        try:
            # Try with -USD suffix first
            ticker = yf.Ticker(f"{symbol}-USD")
            data = ticker.history(period=period)
            
            # If no data, try with -USDT
            if data.empty:
                ticker = yf.Ticker(f"{symbol}-USDT")
                data = ticker.history(period=period)
            
            # If still no data, try without suffix
            if data.empty:
                ticker = yf.Ticker(symbol)
                data = ticker.history(period=period)
                
            # Ensure the index is timezone-aware (UTC) if it's not already
            if data is not None and not data.index.tz:
                data.index = data.index.tz_localize('UTC')
            return data if not data.empty else None
        except Exception as e:
            st.error(f"·É®·Éî·É™·Éì·Éù·Éõ·Éê ·Éõ·Éù·Éú·Éê·É™·Éî·Éõ·Éî·Éë·Éò·É° ·É©·Éê·É¢·Éï·Éò·É†·Éó·Éï·Éò·É°·Éê·É° {symbol}: {e}")
            return None

@st.cache_data(ttl=60)  # Cache for 1 minute for live price
def get_current_price(symbol):
    """Get current price of cryptocurrency"""
    with st.spinner(f"·Éõ·Éò·Éõ·Éì·Éò·Éú·Éê·É†·Éî ·É§·Éê·É°·Éò·É° ·Éõ·Éò·É¶·Éî·Éë·Éê {symbol}-·Éò·É°·Éó·Éï·Éò·É°..."):
        try:
            # Try with -USD suffix first
            ticker = yf.Ticker(f"{symbol}-USD")
            info = ticker.info
            price = info.get('regularMarketPrice', 0)
            
            # If no price, try with -USDT
            if price == 0:
                ticker = yf.Ticker(f"{symbol}-USDT")
                info = ticker.info
                price = info.get('regularMarketPrice', 0)
            
            # If still no price, try without suffix
            if price == 0:
                ticker = yf.Ticker(symbol)
                info = ticker.info
                price = info.get('regularMarketPrice', 0)
                
            return price
        except:
            return 0

def get_halving_cycle_data(symbol):
    """Get data aligned to halving cycles"""
    data = get_crypto_data(symbol, "max")
    if data is None or symbol != 'BTC':
        return None
    
    cycles = {}
    for cycle_name, halving_date in HALVING_DATES.items():
        # Ensure start_date and end_date are timezone-aware (UTC)
        start_date = halving_date - timedelta(days=365)
        end_date = halving_date + timedelta(days=1095)  # 3 years after
        
        cycle_data = data[(data.index >= start_date) & (data.index <= end_date)]
        if len(cycle_data) > 0:
            # Normalize to days from halving
            cycle_data = cycle_data.copy()
            # Ensure halving_date is timezone-aware when calculating days_from_halving
            cycle_data['days_from_halving'] = (cycle_data.index - halving_date).days
            cycles[cycle_name] = cycle_data
    
    return cycles

def advanced_prediction_model(data, symbol, days_ahead, use_cycles=True):
    """
    Advanced prediction model using multiple techniques.
    Returns predicted price, min price, max price, confidence, and trend strength.
    """
    if data is None or len(data) < 30:
        # Return zeros for all outputs if data is insufficient
        return 0, 0, 0, 0, 0  # predicted_price, min_price, max_price, confidence, trend
    
    current_price = data['Close'].iloc[-1]
    
    # 1. Technical Analysis
    # Moving averages
    ma_7 = data['Close'].rolling(window=7).mean().iloc[-1]
    ma_21 = data['Close'].rolling(window=21).mean().iloc[-1]
    ma_50 = data['Close'].rolling(window=min(50, len(data))).mean().iloc[-1]
    
    # RSI
    delta = data['Close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs)).iloc[-1]
    
    # Volatility (annualized)
    volatility = data['Close'].pct_change().std() * np.sqrt(252)
    
    # 2. Trend Analysis
    prices = data['Close'].values
    x = np.arange(len(prices))
    
    # Linear regression for trend (last 30 days for short-term trend)
    slope, intercept, r_value, p_value, std_err = stats.linregress(x[-30:], prices[-30:])
    
    # 3. Cycle Analysis for BTC
    cycle_factor = 1.0
    if symbol == 'BTC' and use_cycles:
        # Check position in halving cycle
        current_date = datetime.now(pytz.utc) # Make current_date timezone-aware
        last_halving = HALVING_DATES['halving_3']
        # next_halving = HALVING_DATES['halving_4'] # Not directly used in factor calculation
        
        days_since_halving = (current_date - last_halving).days
        cycle_position = days_since_halving / 1461  # Approximately 4-year cycle (365 * 4)
        
        # Cycle multiplier based on historical patterns (simplified)
        if cycle_position < 0.25:  # First year after halving (post-halving pump)
            cycle_factor = 1.2
        elif cycle_position < 0.5:  # Second year (peak bull)
            cycle_factor = 1.8
        elif cycle_position < 0.75:  # Third year (bear market)
            cycle_factor = 1.1 # Still some recovery/stability
        else:  # Fourth year (pre-halving accumulation)
            cycle_factor = 0.9 # Potential dip before next halving
    
    # 4. Prediction Calculation
    # Trend component
    trend_prediction = current_price + (slope * days_ahead)
    
    # Momentum component (influence of recent price change)
    momentum = (current_price - ma_21) / ma_21
    momentum_factor = 1 + (momentum * 0.1) # Small influence
    
    # RSI adjustment (mean reversion)
    rsi_factor = 1.0
    if rsi > 70:  # Overbought, likely to pull back
        rsi_factor = 0.95
    elif rsi < 30:  # Oversold, likely to bounce
        rsi_factor = 1.05
    
    # Time decay factor (uncertainty increases with time)
    time_factor = np.exp(-days_ahead / 365.0) # Exponential decay over a year
    
    # Final predicted price combining factors
    predicted_price = (trend_prediction * momentum_factor * rsi_factor * cycle_factor * time_factor +
                       current_price * (1 - time_factor))
    
    # Confidence calculation (higher volatility and longer days_ahead reduce confidence)
    confidence = max(0, min(100, 100 - (volatility * 100) - (days_ahead / 10)))
    
    # Trend strength (absolute slope relative to current price)
    trend_strength = abs(slope / current_price) * 100 if current_price != 0 else 0
    
    # Calculate Min and Max Price predictions based on confidence and volatility
    # A wider range for lower confidence or higher volatility
    # Use a base deviation, scaled by (100 - confidence) / 100
    base_deviation_factor = 0.05 # 5% base deviation for a 100% confident prediction
    
    # Adjust deviation based on confidence and volatility
    # Lower confidence or higher volatility means larger potential deviation
    # Max deviation could be capped to prevent unrealistic ranges
    deviation_percent = (base_deviation_factor + (volatility * 0.5)) * ((100 - confidence) / 100)
    
    min_price = predicted_price * (1 - deviation_percent)
    max_price = predicted_price * (1 + deviation_percent)

    # Ensure min_price is not negative
    min_price = max(0, min_price)
    
    return predicted_price, min_price, max_price, confidence, trend_strength

def create_cycle_overlay_chart(symbol):
    """Create Bitcoin-style cycle overlay chart"""
    if symbol != 'BTC':
        return create_enhanced_chart(symbol)
    
    cycles = get_halving_cycle_data(symbol)
    if not cycles:
        return create_enhanced_chart(symbol)
    
    fig = go.Figure()
    
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd']
    
    for i, (cycle_name, cycle_data) in enumerate(cycles.items()):
        if len(cycle_data) > 0:
            # Normalize price to halving day price
            # Ensure halving_date is timezone-aware for correct indexing
            halving_date_for_indexing = HALVING_DATES[cycle_name]
            halving_price_series = cycle_data[cycle_data['days_from_halving'] == 0]['Close']
            
            if len(halving_price_series) > 0:
                halving_price = halving_price_series.iloc[0]
                normalized_price = (cycle_data['Close'] / halving_price - 1) * 100
                
                fig.add_trace(go.Scatter(
                    x=cycle_data['days_from_halving'],
                    y=normalized_price,
                    mode='lines',
                    name=f'{cycle_name.replace("_", " ").title()}',
                    line=dict(color=colors[i % len(colors)], width=2),
                    opacity=0.7
                ))
    
    # Add current cycle projection
    current_data = get_crypto_data(symbol, "2y")
    if current_data is not None:
        current_date = datetime.now(pytz.utc) # Make current_date timezone-aware
        last_halving = HALVING_DATES['halving_3']
        days_since_halving = (current_date - last_halving).days
        
        # Ensure current_data index is aligned for comparison
        halving_data = current_data[current_data.index <= last_halving]
        if len(halving_data) > 0:
            halving_price = halving_data['Close'].iloc[-1]
            current_change = (current_data['Close'].iloc[-1] / halving_price - 1) * 100
            
            fig.add_trace(go.Scatter(
                x=[days_since_halving],
                y=[current_change],
                mode='markers',
                name='Current Position',
                marker=dict(color='red', size=10, symbol='diamond'),
                text=f'Current: {current_change:.1f}%',
                textposition="top center"
            ))
    
    fig.update_layout(
        title=f'{symbol} - ·É∞·Éê·Éö·Éï·Éò·Éú·Éí·Éò·É° ·É™·Éò·Éô·Éö·Éî·Éë·Éò·É° ·É®·Éî·Éì·Éê·É†·Éî·Éë·Éê',
        xaxis_title='·Éì·É¶·Éî·Éî·Éë·Éò ·É∞·Éê·Éö·Éï·Éò·Éú·Éí·Éò·É° ·É®·Éî·Éõ·Éì·Éî·Éí',
        yaxis_title='·É§·Éê·É°·Éò·É° ·É™·Éï·Éö·Éò·Éö·Éî·Éë·Éê ·É∞·Éê·Éö·Éï·Éò·Éú·Éí·Éò·É° ·É§·Éê·É°·Éò·Éì·Éê·Éú (%)',
        height=600,
        showlegend=True,
        xaxis=dict(
            range=[-365, 1095],
            gridcolor='lightgray',
            zerolinecolor='gray'
        ),
        yaxis=dict(
            gridcolor='lightgray',
            zerolinecolor='gray'
        ),
        plot_bgcolor='white'
    )
    
    return fig

def create_enhanced_chart(symbol):
    """Create enhanced chart with predictions"""
    data = get_crypto_data(symbol, "6mo")
    if data is None:
        return None
    
    fig = make_subplots(
        rows=3, cols=1,
        shared_xaxes=True,
        vertical_spacing=0.05,
        subplot_titles=(f'{symbol}/USD - Enhanced Analysis', 'Volume & Indicators', 'Predictions'),
        row_heights=[0.5, 0.25, 0.25]
    )
    
    # Price chart with candlesticks
    fig.add_trace(
        go.Candlestick(
            x=data.index,
            open=data['Open'],
            high=data['High'],
            low=data['Low'],
            close=data['Close'],
            name='Price'
        ),
        row=1, col=1
    )
    
    # Moving averages
    fig.add_trace(
        go.Scatter(
            x=data.index,
            y=data['Close'].rolling(window=7).mean(),
            name='MA7',
            line=dict(color='orange', width=1)
        ),
        row=1, col=1
    )
    
    fig.add_trace(
        go.Scatter(
            x=data.index,
            y=data['Close'].rolling(window=21).mean(),
            name='MA21',
            line=dict(color='blue', width=1)
        ),
        row=1, col=1
    )
    
    # Volume
    fig.add_trace(
        go.Bar(
            x=data.index,
            y=data['Volume'],
            name='Volume',
            marker_color='lightblue'
        ),
        row=2, col=1
    )
    
    # RSI
    delta = data['Close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    
    fig.add_trace(
        go.Scatter(
            x=data.index,
            y=rsi,
            name='RSI',
            line=dict(color='purple', width=1)
        ),
        row=2, col=1
    )
    
    # Predictions
    current_price = data['Close'].iloc[-1]
    future_dates = pd.date_range(start=data.index[-1] + timedelta(days=1), periods=30, freq='D')
    predictions_prices = []
    
    for i, date in enumerate(future_dates):
        pred_price, min_price, max_price, confidence, trend = advanced_prediction_model(data, symbol, i+1)
        predictions_prices.append(pred_price)
    
    fig.add_trace(
        go.Scatter(
            x=future_dates,
            y=predictions_prices,
            name='Prediction',
            line=dict(color='red', dash='dash', width=2)
        ),
        row=1, col=1
    )
    
    # Confidence intervals (using a fixed 10% for chart visualization for simplicity)
    upper_bound = [p * 1.1 for p in predictions_prices]
    lower_bound = [p * 0.9 for p in predictions_prices]
    
    fig.add_trace(
        go.Scatter(
            x=future_dates,
            y=upper_bound,
            fill=None,
            mode='lines',
            line_color='rgba(0,0,0,0)',
            showlegend=False
        ),
        row=1, col=1
    )
    
    fig.add_trace(
        go.Scatter(
            x=future_dates,
            y=lower_bound,
            fill='tonexty',
            mode='lines',
            line_color='rgba(0,0,0,0)',
            name='Confidence Interval',
            fillcolor='rgba(255,0,0,0.1)'
        ),
        row=1, col=1
    )
    
    fig.update_layout(
        title=f'{symbol}/USD - Advanced Trading Analysis',
        height=800,
        xaxis_rangeslider_visible=False
    )
    
    return fig

def get_futures_signals(symbol):
    """Generate futures trading signals"""
    data = get_crypto_data(symbol, "1mo")
    if data is None:
        return []
    
    current_price = data['Close'].iloc[-1]
    signals = []
    
    # Predictions for different timeframes
    timeframes = [1, 3, 7, 14, 30]
    
    for days in timeframes:
        pred_price, min_price, max_price, confidence, trend = advanced_prediction_model(data, symbol, days)
        change_percent = (pred_price - current_price) / current_price * 100
        
        # Generate signal
        if change_percent > 2 and confidence > 60:
            signal = "LONG"
            color = "green"
        elif change_percent < -2 and confidence > 60:
            signal = "SHORT"
            color = "red"
        else:
            signal = "HOLD"
            color = "gray"
        
        signals.append({
            'timeframe': f'{days} ·Éì·É¶·Éî',
            'predicted_price': pred_price,
            'min_price': min_price,  # Added min_price
            'max_price': max_price,  # Added max_price
            'change_percent': change_percent,
            'confidence': confidence,
            'signal': signal,
            'color': color
        })
    
    return signals

# Sidebar navigation
with st.sidebar:
    st.header("üöÄ ·Éú·Éê·Éï·Éò·Éí·Éê·É™·Éò·Éê")
    # Removed st.markdown(" ") for more compactness
    
    # Live mode toggle moved inside the sidebar block
    st.session_state.live_mode = st.checkbox("üî¥ ·Éö·Éê·Éò·Éï ·É†·Éî·Éü·Éò·Éõ·Éò", value=st.session_state.live_mode)

    if st.session_state.live_mode:
        auto_refresh = st.slider("Auto Refresh (·É¨·Éê·Éõ·Éò)", 10, 300, 60)
        if st.button("üîÑ ·Éí·Éê·Éú·Éê·ÉÆ·Éö·Éî·Éë·Éê"):
            st.rerun()
    
    st.markdown("---") # Separator
    
    # Navigation buttons with updated styling and emojis
    if st.button("üìà **·É™·Éò·Éô·Éö·Éî·Éë·Éò·É° ·Éê·Éú·Éê·Éö·Éò·Éñ·Éò**", key="btn_cycles"):
        st.session_state.page = "üìà ·É™·Éò·Éô·Éö·Éî·Éë·Éò·É° ·Éê·Éú·Éê·Éö·Éò·Éñ·Éò"
    if st.button("üéØ **Futures ·É°·Éò·Éí·Éú·Éê·Éö·Éî·Éë·Éò**", key="btn_futures"):
        st.session_state.page = "üéØ Futures ·É°·Éò·Éí·Éú·Éê·Éö·Éî·Éë·Éò"
    if st.button("üíº **·É©·Éî·Éõ·Éò ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù**", key="btn_portfolio"):
        st.session_state.page = "üíº ·É©·Éî·Éõ·Éò ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù"
    if st.button("üìä **·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éê**", key="btn_info"):
        st.session_state.page = "üìä ·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éê"

# Main content
page = st.session_state.page # Use the page from session state

if page == "üìà ·É™·Éò·Éô·Éö·Éî·Éë·Éò·É° ·Éê·Éú·Éê·Éö·Éò·Éñ·Éò":
    st.title("üìà ·Éô·É†·Éò·Éû·É¢·Éù·Éï·Éê·Éö·É£·É¢·Éî·Éë·Éò·É° ·É™·Éò·Éô·Éö·Éî·Éë·Éò·É° ·Éê·Éú·Éê·Éö·Éò·Éñ·Éò")
    
    if st.session_state.live_mode:
        st.success("ÔøΩ ·Éö·Éê·Éò·Éï ·É†·Éî·Éü·Éò·Éõ·Éò ·Éê·É•·É¢·Éò·É£·É†·Éò·Éê")
    
    # Crypto selector with search
    crypto_options = [
        'BTC', 'ETH', 'BNB', 'XRP', 'ADA', 'SOL', 'DOGE', 'DOT', 'MATIC', 'AVAX',
        'SHIB', 'TRX', 'LINK', 'UNI', 'ATOM', 'LTC', 'ETC', 'BCH', 'XLM', 'ALGO',
        'VET', 'ICP', 'FIL', 'HBAR', 'AAVE', 'MANA', 'SAND', 'CRV', 'GRT', 'ENJ',
        'SUSHI', 'COMP', 'MKR', 'SNX', 'YFI', 'THETA', 'FTM', 'NEAR', 'LUNA',
        'CAKE', 'RUNE', 'KSM', 'EGLD', 'ZEC', 'DASH', 'XMR', 'FLOW', 'MINA',
        'ONE', 'CELO', 'BAT', 'ZRX', 'OMG', 'LRC', 'STORJ', 'REN', 'BAND',
        'PEPE', 'FLOKI', 'BONK', 'WIF', 'BOME', 'MYRO', 'POPCAT', 'NEIRO'
    ]
    
    # Changed column ratio to allow better stacking on small screens
    col1, col2 = st.columns(2) 
    with col1:
        selected_crypto = st.selectbox("·Éê·Éò·É†·É©·Éò·Éî ·Éô·É†·Éò·Éû·É¢·Éù·Éï·Éê·Éö·É£·É¢·Éê:", crypto_options)
    
    with col2:
        manual_crypto = st.text_input("·Éê·Éú ·É®·Éî·Éò·Éß·Éï·Éê·Éú·Éî·Éó ·É°·Éò·Éõ·Éë·Éù·Éö·Éù:", placeholder="·Éõ·Éê·Éí: PEPE")
    
    if manual_crypto:
        selected_crypto = manual_crypto.upper()
    
    if selected_crypto:
        # Create chart
        if selected_crypto == 'BTC':
            chart = create_cycle_overlay_chart(selected_crypto)
        else:
            chart = create_enhanced_chart(selected_crypto)
        
        if chart:
            st.plotly_chart(chart, use_container_width=True)
        
        # Current price and metrics
        current_price = get_current_price(selected_crypto)
        if current_price > 0:
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    label=f"{selected_crypto}/USD",
                    value=f"${current_price:.6f}" if current_price < 1 else f"${current_price:.2f}",
                    delta=None
                )
            
            # Additional metrics
            data = get_crypto_data(selected_crypto, "1mo")
            if data is not None:
                with col2:
                    volatility = data['Close'].pct_change().std() * np.sqrt(252) * 100
                    st.metric("·Éï·Éù·Éö·Éê·É¢·Éò·Éö·É£·É†·Éù·Éë·Éê", f"{volatility:.1f}%")
                
                with col3:
                    change_24h = (current_price - data['Close'].iloc[-2]) / data['Close'].iloc[-2] * 100
                    st.metric("24h ·É™·Éï·Éö·Éò·Éö·Éî·Éë·Éê", f"{change_24h:.1f}%")

elif page == "üéØ Futures ·É°·Éò·Éí·Éú·Éê·Éö·Éî·Éë·Éò":
    st.title("üéØ Futures Trading ·É°·Éò·Éí·Éú·Éê·Éö·Éî·Éë·Éò")
    
    if st.session_state.live_mode:
        st.success("üî¥ ·Éö·Éê·Éò·Éï ·É†·Éî·Éü·Éò·Éõ·Éò ·Éê·É•·É¢·Éò·É£·É†·Éò·Éê")
    
    # Crypto selector with manual input for Futures Signals
    crypto_options_futures = [
        'BTC', 'ETH', 'BNB', 'XRP', 'ADA', 'SOL', 'DOGE', 'DOT', 'MATIC', 'AVAX',
        'SHIB', 'TRX', 'LINK', 'UNI', 'ATOM', 'LTC', 'ETC', 'BCH', 'XLM', 'ALGO',
        'PEPE', 'FLOKI', 'BONK', 'WIF', 'BOME', 'MYRO', 'POPCAT', 'NEIRO' # Added meme coins to futures options
    ]
    
    col1, col2 = st.columns(2)
    with col1:
        selected_crypto = st.selectbox("·Éê·Éò·É†·É©·Éò·Éî ·Éô·É†·Éò·Éû·É¢·Éù·Éï·Éê·Éö·É£·É¢·Éê:", crypto_options_futures)
    
    with col2:
        manual_crypto = st.text_input("·Éê·Éú ·É®·Éî·Éò·Éß·Éï·Éê·Éú·Éî·Éó ·É°·Éò·Éõ·Éë·Éù·Éö·Éù:", placeholder="·Éõ·Éê·Éí: PEPE")
    
    if manual_crypto:
        selected_crypto = manual_crypto.upper()
    
    if selected_crypto:
        signals = get_futures_signals(selected_crypto)
        
        if signals:
            st.subheader("üéØ ·É¢·É†·Éî·Éò·Éì·Éò·Éú·Éí ·É°·Éò·Éí·Éú·Éê·Éö·Éî·Éë·Éò")
            
            # Display signals with predicted min/max prices
            for signal in signals:
                st.markdown(f"**{signal['timeframe']}**")
                
                # Use columns for main signal, predicted price, min, and max
                col_sig, col_pred, col_min, col_max = st.columns(4)
                with col_sig:
                    st.metric(
                        label="·É°·Éò·Éí·Éú·Éê·Éö·Éò",
                        value=signal['signal'],
                        delta=f"{signal['change_percent']:.1f}%"
                    )
                with col_pred:
                    st.metric(
                        label="·Éû·É†·Éù·Éí·Éú·Éù·Éñ·Éò",
                        value=f"${signal['predicted_price']:.4f}" if signal['predicted_price'] < 1 else f"${signal['predicted_price']:.2f}"
                    )
                with col_min:
                    st.metric(
                        label="·Éõ·Éò·Éú. ·É§·Éê·É°·Éò",
                        value=f"${signal['min_price']:.4f}" if signal['min_price'] < 1 else f"${signal['min_price']:.2f}"
                    )
                with col_max:
                    st.metric(
                        label="·Éõ·Éê·É•·É°. ·É§·Éê·É°·Éò",
                        value=f"${signal['max_price']:.4f}" if signal['max_price'] < 1 else f"${signal['max_price']:.2f}"
                    )
                
                # Confidence and visual indicator in a separate row/column for better alignment
                col_conf_status = st.columns([1, 3]) # Adjust ratio for confidence and status
                with col_conf_status[0]:
                    st.metric(
                        label="·Éú·Éì·Éù·Éë·Éê",
                        value=f"{signal['confidence']:.0f}%"
                    )
                with col_conf_status[1]:
                    if signal['signal'] == 'LONG':
                        st.success("üìà LONG")
                    elif signal['signal'] == 'SHORT':
                        st.error("üìâ SHORT")
                    else:
                        st.info("‚è∏Ô∏è HOLD")
                
                st.markdown("---") # Separator between signals
        
        # Risk management
        st.subheader("‚ö†Ô∏è ·É†·Éò·É°·Éô ·Éõ·Éî·Éú·Éî·ÉØ·Éõ·Éî·Éú·É¢·Éò")
        
        col1, col2 = st.columns(2)
        with col1:
            leverage = st.slider("·Éö·Éî·Éï·Éî·É†·Éò·ÉØ·Éò", 1, 20, 5)
        with col2:
            risk_percent = st.slider("·É†·Éò·É°·Éô·Éò (% ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù·Éì·Éê·Éú)", 1, 10, 2)
        
        current_price = get_current_price(selected_crypto)
        if current_price > 0:
            st.write(f"**·Éõ·Éò·Éõ·Éì·Éò·Éú·Éê·É†·Éî ·É§·Éê·É°·Éò:** ${current_price:.4f}")
            
            # Calculate position size
            account_balance = st.number_input("·Éê·Éú·Éí·Éê·É†·Éò·É®·Éò·É° ·Éú·Éê·É®·Éó·Éò ($)", min_value=100, value=1000)
            risk_amount = account_balance * (risk_percent / 100)
            
            st.write(f"**·É†·Éò·É°·Éô·Éò·É° ·Éù·Éì·Éî·Éú·Éù·Éë·Éê:** ${risk_amount:.2f}")
            st.write(f"**·É®·Éî·Éõ·Éù·Éó·Éê·Éï·Éê·Éñ·Éî·Éë·É£·Éö·Éò ·Éû·Éù·Éñ·Éò·É™·Éò·Éò·É° ·Éñ·Éù·Éõ·Éê:** {risk_amount * leverage:.2f} {selected_crypto}")

elif page == "üíº ·É©·Éî·Éõ·Éò ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù":
    st.title("üíº ·É©·Éî·Éõ·Éò ·Éô·É†·Éò·Éû·É¢·Éù ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù")
    
    # Add cryptocurrency to portfolio
    st.subheader("‚ûï ·Éô·É†·Éò·Éû·É¢·Éù·Éï·Éê·Éö·É£·É¢·Éò·É° ·Éì·Éê·Éõ·Éê·É¢·Éî·Éë·Éê")
    
    col1, col2 = st.columns(2)
    
    with col1:
        crypto_options = [
            'BTC', 'ETH', 'BNB', 'XRP', 'ADA', 'SOL', 'DOGE', 'DOT', 'MATIC', 'AVAX',
            'SHIB', 'TRX', 'LINK', 'UNI', 'ATOM', 'LTC', 'ETC', 'BCH', 'XLM', 'ALGO',
            'VET', 'ICP', 'FIL', 'HBAR', 'AAVE', 'MANA', 'SAND', 'CRV', 'GRT', 'ENJ',
            'SUSHI', 'COMP', 'MKR', 'SNX', 'YFI', 'THETA', 'FTM', 'NEAR', 'LUNA',
            'CAKE', 'RUNE', 'KSM', 'EGLD', 'ZEC', 'DASH', 'XMR', 'FLOW', 'MINA',
            'ONE', 'CELO', 'BAT', 'ZRX', 'OMG', 'LRC', 'STORJ', 'REN', 'BAND',
            'PEPE', 'FLOKI', 'BONK', 'WIF', 'BOME', 'MYRO', 'POPCAT', 'NEIRO'
        ]
        selected_crypto = st.selectbox("·Éê·Éò·É†·É©·Éò·Éî ·Éô·É†·Éò·Éû·É¢·Éù·Éï·Éê·Éö·É£·É¢·Éê:", crypto_options)
        
        # Manual input option
        manual_crypto = st.text_input("·Éê·Éú ·É®·Éî·Éò·Éß·Éï·Éê·Éú·Éî·Éó ·É°·Éò·Éõ·Éë·Éù·Éö·Éù:", placeholder="·Éõ·Éê·Éí: PEPE, FLOKI")
        
        # Use manual input if provided
        if manual_crypto:
            selected_crypto = manual_crypto.upper()
    
    with col2:
        amount = st.number_input("·É†·Éê·Éù·Éì·Éî·Éú·Éù·Éë·Éê:", min_value=0.0, step=0.1)
    
    if st.button("·Éì·Éê·Éõ·Éê·É¢·Éî·Éë·Éê ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù·É®·Éò"):
        if selected_crypto and amount > 0:
            if selected_crypto in st.session_state.portfolio:
                st.session_state.portfolio[selected_crypto] += amount
            else:
                st.session_state.portfolio[selected_crypto] = amount
            st.success(f"·É¨·Éê·É†·Éõ·Éê·É¢·Éî·Éë·Éò·Éó ·Éì·Éê·Éî·Éõ·Éê·É¢·Éê {amount} {selected_crypto}")
            st.rerun()
    
    # Display portfolio
    if st.session_state.portfolio:
        st.subheader("üìã ·É©·Éî·Éõ·Éò ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù")
        
        portfolio_data = []
        total_value = 0
        
        for crypto, amount in st.session_state.portfolio.items():
            current_price = get_current_price(crypto)
            total_crypto_value = amount * current_price
            total_value += total_crypto_value
            
            # Get advanced predictions
            data = get_crypto_data(crypto, "3mo")
            predictions = {}
            if data is not None:
                periods = [3, 7, 30, 90, 180, 365]
                for days in periods:
                    # Now getting min_price and max_price from the model
                    pred_price, min_price, max_price, confidence, trend = advanced_prediction_model(data, crypto, days)
                    predictions[days] = {
                        "price": pred_price,
                        "min_price": min_price,
                        "max_price": max_price,
                        "change": (pred_price - current_price) / current_price * 100
                    }
            
            portfolio_data.append({
                "·Éô·É†·Éò·Éû·É¢·Éù": crypto,
                "·É†·Éê·Éù·Éì·Éî·Éú·Éù·Éë·Éê": f"{amount:.4f}",
                "·Éõ·Éò·Éõ·Éì·Éò·Éú·Éê·É†·Éî ·É§·Éê·É°·Éò": f"${current_price:.6f}" if current_price < 1 else f"${current_price:.2f}",
                "·ÉØ·Éê·Éõ·É£·É†·Éò ·É¶·Éò·É†·Éî·Éë·É£·Éö·Éî·Éë·Éê": f"${total_crypto_value:.2f}",
                "3 ·Éì·É¶·Éî (·Éû·É†·Éù·Éí·Éú·Éù·Éñ·Éò)": f"${predictions.get(3, {}).get('price', 0):.6f}" if predictions.get(3, {}).get('price', 0) < 1 else f"${predictions.get(3, {}).get('price', 0):.2f} ({predictions.get(3, {}).get('change', 0):.1f}%)",
                "3 ·Éì·É¶·Éî (·Éõ·Éò·Éú)": f"${predictions.get(3, {}).get('min_price', 0):.6f}" if predictions.get(3, {}).get('min_price', 0) < 1 else f"${predictions.get(3, {}).get('min_price', 0):.2f}",
                "3 ·Éì·É¶·Éî (·Éõ·Éê·É•·É°)": f"${predictions.get(3, {}).get('max_price', 0):.6f}" if predictions.get(3, {}).get('max_price', 0) < 1 else f"${predictions.get(3, {}).get('max_price', 0):.2f}",
                "1 ·Éô·Éï·Éò·É†·Éê (·Éû·É†·Éù·Éí·Éú·Éù·Éñ·Éò)": f"${predictions.get(7, {}).get('price', 0):.6f}" if predictions.get(7, {}).get('price', 0) < 1 else f"${predictions.get(7, {}).get('price', 0):.2f} ({predictions.get(7, {}).get('change', 0):.1f}%)",
                "1 ·Éô·Éï·Éò·É†·Éê (·Éõ·Éò·Éú)": f"${predictions.get(7, {}).get('min_price', 0):.6f}" if predictions.get(7, {}).get('min_price', 0) < 1 else f"${predictions.get(7, {}).get('min_price', 0):.2f}",
                "1 ·Éô·Éï·Éò·É†·Éê (·Éõ·Éê·É•·É°)": f"${predictions.get(7, {}).get('max_price', 0):.6f}" if predictions.get(7, {}).get('max_price', 0) < 1 else f"${predictions.get(7, {}).get('max_price', 0):.2f}",
                "1 ·Éó·Éï·Éî (·Éû·É†·Éù·Éí·Éú·Éù·Éñ·Éò)": f"${predictions.get(30, {}).get('price', 0):.6f}" if predictions.get(30, {}).get('price', 0) < 1 else f"${predictions.get(30, {}).get('price', 0):.2f} ({predictions.get(30, {}).get('change', 0):.1f}%)",
                "1 ·Éó·Éï·Éî (·Éõ·Éò·Éú)": f"${predictions.get(30, {}).get('min_price', 0):.6f}" if predictions.get(30, {}).get('min_price', 0) < 1 else f"${predictions.get(30, {}).get('min_price', 0):.2f}",
                "1 ·Éó·Éï·Éî (·Éõ·Éê·É•·É°)": f"${predictions.get(30, {}).get('max_price', 0):.6f}" if predictions.get(30, {}).get('max_price', 0) < 1 else f"${predictions.get(30, {}).get('max_price', 0):.2f}",
                "3 ·Éó·Éï·Éî (·Éû·É†·Éù·Éí·Éú·Éù·Éñ·Éò)": f"${predictions.get(90, {}).get('price', 0):.6f}" if predictions.get(90, {}).get('price', 0) < 1 else f"${predictions.get(90, {}).get('price', 0):.2f} ({predictions.get(90, {}).get('change', 0):.1f}%)",
                "3 ·Éó·Éï·Éî (·Éõ·Éò·Éú)": f"${predictions.get(90, {}).get('min_price', 0):.6f}" if predictions.get(90, {}).get('min_price', 0) < 1 else f"${predictions.get(90, {}).get('min_price', 0):.2f}",
                "3 ·Éó·Éï·Éî (·Éõ·Éê·É•·É°)": f"${predictions.get(90, {}).get('max_price', 0):.6f}" if predictions.get(90, {}).get('max_price', 0) < 1 else f"${predictions.get(90, {}).get('max_price', 0):.2f}",
                "6 ·Éó·Éï·Éî (·Éû·É†·Éù·Éí·Éú·Éù·Éñ·Éò)": f"${predictions.get(180, {}).get('price', 0):.6f}" if predictions.get(180, {}).get('price', 0) < 1 else f"${predictions.get(180, {}).get('price', 0):.2f} ({predictions.get(180, {}).get('change', 0):.1f}%)",
                "6 ·Éó·Éï·Éî (·Éõ·Éò·Éú)": f"${predictions.get(180, {}).get('min_price', 0):.6f}" if predictions.get(180, {}).get('min_price', 0) < 1 else f"${predictions.get(180, {}).get('min_price', 0):.2f}",
                "6 ·Éó·Éï·Éî (·Éõ·Éê·É•·É°)": f"${predictions.get(180, {}).get('max_price', 0):.6f}" if predictions.get(180, {}).get('max_price', 0) < 1 else f"${predictions.get(180, {}).get('max_price', 0):.2f}",
                "1 ·É¨·Éî·Éö·Éò (·Éû·É†·Éù·Éí·Éú·Éù·Éñ·Éò)": f"${predictions.get(365, {}).get('price', 0):.6f}" if predictions.get(365, {}).get('price', 0) < 1 else f"${predictions.get(365, {}).get('price', 0):.2f} ({predictions.get(365, {}).get('change', 0):.1f}%)",
                "1 ·É¨·Éî·Éö·Éò (·Éõ·Éò·Éú)": f"${predictions.get(365, {}).get('min_price', 0):.6f}" if predictions.get(365, {}).get('min_price', 0) < 1 else f"${predictions.get(365, {}).get('min_price', 0):.2f}",
                "1 ·É¨·Éî·Éö·Éò (·Éõ·Éê·É•·É°)": f"${predictions.get(365, {}).get('max_price', 0):.6f}" if predictions.get(365, {}).get('max_price', 0) < 1 else f"${predictions.get(365, {}).get('max_price', 0):.2f}"
            })
        
        df_portfolio = pd.DataFrame(portfolio_data)
        st.dataframe(df_portfolio, use_container_width=True)
        
        st.markdown(f"### üí∞ ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù·É° ·ÉØ·Éê·Éõ·É£·É†·Éò ·É¶·Éò·É†·Éî·Éë·É£·Éö·Éî·Éë·Éê: ${total_value:.2f}")
        
        # Remove from portfolio
        st.subheader("‚ûñ ·Éô·É†·Éò·Éû·É¢·Éù·Éï·Éê·Éö·É£·É¢·Éò·É° ·É¨·Éê·É®·Éö·Éê")
        crypto_to_remove = st.selectbox("·Éê·Éò·É†·É©·Éò·Éî ·Éô·É†·Éò·Éû·É¢·Éù·Éï·Éê·Éö·É£·É¢·Éê ·É¨·Éê·É°·Éê·É®·Éö·Éî·Éö·Éê·Éì:", list(st.session_state.portfolio.keys()))
        if st.button("·É¨·Éê·É®·Éö·Éê ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù·Éì·Éê·Éú"):
            if crypto_to_remove in st.session_state.portfolio:
                del st.session_state.portfolio[crypto_to_remove]
                st.success(f"{crypto_to_remove} ·É¨·Éê·É†·Éõ·Éê·É¢·Éî·Éë·Éò·Éó ·É¨·Éê·Éò·É®·Éê·Éö·Éê ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù·Éì·Éê·Éú.")
                st.rerun()
        
        st.subheader("üóëÔ∏è ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù·É° ·Éí·Éê·É°·É£·É§·Éó·Éê·Éï·Éî·Éë·Éê")
        if st.button("·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù·É° ·Éí·Éê·É°·É£·É§·Éó·Éê·Éï·Éî·Éë·Éê", help="·É¨·Éê·É®·Éö·Éò·É° ·Éß·Éï·Éî·Éö·Éê ·Éê·É•·É¢·Éò·Éï·É° ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù·Éì·Éê·Éú"):
            st.session_state.portfolio = {}
            st.success("·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù ·É¨·Éê·É†·Éõ·Éê·É¢·Éî·Éë·Éò·Éó ·Éí·Éê·É°·É£·É§·Éó·Éê·Éï·Éì·Éê.")
            st.rerun()
    else:
        st.info("·Éó·É•·Éï·Éî·Éú·Éò ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù ·É™·Éê·É†·Éò·Éî·Éö·Éò·Éê. ·Éì·Éê·Éê·Éõ·Éê·É¢·Éî·Éó ·Éô·É†·Éò·Éû·É¢·Éù·Éï·Éê·Éö·É£·É¢·Éî·Éë·Éò ·Éñ·Éî·Éõ·Éù·Éó.")

elif page == "üìä ·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éê":
    st.title("üìä ·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éê ·Éê·Éû·Éö·Éò·Éô·Éê·É™·Éò·Éò·É° ·É®·Éî·É°·Éê·ÉÆ·Éî·Éë")
    st.markdown("""
    ·Éî·É° ·Éê·Éû·Éö·Éò·Éô·Éê·É™·Éò·Éê ·É®·Éî·É•·Éõ·Éú·Éò·Éö·Éò·Éê ·Éô·É†·Éò·Éû·É¢·Éù·Éï·Éê·Éö·É£·É¢·Éî·Éë·Éò·É° ·Éë·Éê·Éñ·É†·Éò·É° ·Éê·Éú·Éê·Éö·Éò·Éñ·Éò·É°·Éê ·Éì·Éê ·Éû·É†·Éù·Éí·Éú·Éù·Éñ·Éò·É†·Éî·Éë·Éò·É°·Éó·Éï·Éò·É°.
    
    **·É´·Éò·É†·Éò·Éó·Éê·Éì·Éò ·É§·É£·Éú·É•·É™·Éò·Éî·Éë·Éò:**
    
    * **·É™·Éò·Éô·Éö·Éî·Éë·Éò·É° ·Éê·Éú·Éê·Éö·Éò·Éñ·Éò:** Bitcoin-·Éò·É° ·É∞·Éê·Éö·Éï·Éò·Éú·Éí·Éò·É° ·É™·Éò·Éô·Éö·Éî·Éë·Éò·É° ·Éò·É°·É¢·Éù·É†·Éò·É£·Éö·Éò ·Éõ·Éù·Éú·Éê·É™·Éî·Éõ·Éî·Éë·Éò·É° ·Éï·Éò·Éñ·É£·Éê·Éö·Éò·Éñ·Éê·É™·Éò·Éê ·Éì·Éê ·Éõ·Éò·Éõ·Éì·Éò·Éú·Éê·É†·Éî ·É™·Éò·Éô·Éö·Éò·É° ·É®·Éî·Éì·Éê·É†·Éî·Éë·Éê.
    * **·Éí·Éê·É£·Éõ·ÉØ·Éù·Éë·Éî·É°·Éî·Éë·É£·Éö·Éò ·Éê·Éú·Éê·Éö·Éò·Éñ·Éò:** ·É°·Éê·Éú·Éó·Éö·Éî·Éë·Éò·É° ·Éí·É†·Éê·É§·Éò·Éô·Éî·Éë·Éò, ·Éõ·Éù·É´·É†·Éê·Éï·Éò ·É°·Éê·É®·É£·Éê·Éö·Éù·Éî·Éë·Éò (MA7, MA21), ·Éõ·Éù·É™·É£·Éö·Éù·Éë·Éê ·Éì·Éê RSI ·Éò·Éú·Éì·Éò·Éô·Éê·É¢·Éù·É†·Éò.
    * **·Éõ·Éù·É¨·Éò·Éú·Éê·Éï·Éî ·Éû·É†·Éù·Éí·Éú·Éù·Éñ·Éò·É†·Éî·Éë·Éê:** ·É§·Éê·É°·Éî·Éë·Éò·É° ·Éû·É†·Éù·Éí·Éú·Éù·Éñ·Éò·É†·Éî·Éë·Éê ·É°·ÉÆ·Éï·Éê·Éì·Éê·É°·ÉÆ·Éï·Éê ·Éï·Éê·Éì·Éî·Éë·É®·Éò, ·Éú·Éì·Éù·Éë·Éò·É° ·Éì·Éù·Éú·Éò·Éó.
    * **Futures ·É°·Éò·Éí·Éú·Éê·Éö·Éî·Éë·Éò:** ·Éõ·Éù·Éô·Éö·Éî ·Éì·Éê ·É°·Éê·É®·É£·Éê·Éö·Éù·Éï·Éê·Éì·Éò·Éê·Éú·Éò ·É¢·É†·Éî·Éò·Éì·Éò·Éú·Éí ·É°·Éò·Éí·Éú·Éê·Éö·Éî·Éë·Éò (LONG/SHORT/HOLD) ·É†·Éò·É°·Éô ·Éõ·Éî·Éú·Éî·ÉØ·Éõ·Éî·Éú·É¢·Éò·É° ·É†·Éî·Éô·Éù·Éõ·Éî·Éú·Éì·Éê·É™·Éò·Éî·Éë·Éò·Éó.
    * **·É©·Éî·Éõ·Éò ·Éû·Éù·É†·É¢·É§·Éù·Éö·Éò·Éù:** ·Éó·É•·Éï·Éî·Éú·Éò ·Éô·É†·Éò·Éû·É¢·Éù ·Éê·É•·É¢·Éò·Éï·Éî·Éë·Éò·É° ·Éõ·Éê·É†·Éó·Éï·Éê, ·Éõ·Éò·Éõ·Éì·Éò·Éú·Éê·É†·Éî ·É¶·Éò·É†·Éî·Éë·É£·Éö·Éî·Éë·Éò·É° ·Éì·Éê ·É°·Éê·Éõ·Éù·Éõ·Éê·Éï·Éö·Éù ·Éû·É†·Éù·Éí·Éú·Éù·Éñ·Éî·Éë·Éò·É° ·Éú·Éê·ÉÆ·Éï·Éê.
    
    **·Éõ·Éù·Éú·Éê·É™·Éî·Éõ·Éó·Éê ·É¨·Éß·Éê·É†·Éù:** Yahoo Finance (YFinance)
    
    ---
    
    **‚ö†Ô∏è ·Éõ·Éú·Éò·É®·Éï·Éú·Éî·Éö·Éù·Éï·Éê·Éú·Éò ·Éí·Éê·É§·É†·Éó·ÉÆ·Éò·Éö·Éî·Éë·Éê:**
    ·Éî·É° ·Éê·Éû·Éö·Éò·Éô·Éê·É™·Éò·Éê ·Éí·Éê·Éú·Éô·É£·Éó·Éï·Éú·Éò·Éö·Éò·Éê ·Éõ·ÉÆ·Éù·Éö·Éù·Éì ·É°·Éê·Éí·Éê·Éú·Éõ·Éê·Éú·Éê·Éó·Éö·Éî·Éë·Éö·Éù ·Éì·Éê ·É°·Éê·Éò·Éú·É§·Éù·É†·Éõ·Éê·É™·Éò·Éù ·Éõ·Éò·Éñ·Éú·Éî·Éë·Éò·É°·Éó·Éï·Éò·É°.
    ·Éô·É†·Éò·Éû·É¢·Éù·Éï·Éê·Éö·É£·É¢·Éî·Éë·Éò·Éó ·Éï·Éê·É≠·É†·Éù·Éë·Éê ·Éõ·Éê·É¶·Éê·Éö ·É†·Éò·É°·Éô·Éî·Éë·Éó·Éê·Éú ·Éê·É†·Éò·É° ·Éì·Éê·Éô·Éê·Éï·É®·Éò·É†·Éî·Éë·É£·Éö·Éò ·Éì·Éê ·É®·Éî·Éò·É´·Éö·Éî·Éë·Éê ·Éí·Éê·Éõ·Éù·Éò·É¨·Éï·Éò·Éù·É° ·Éô·Éê·Éû·Éò·É¢·Éê·Éö·Éò·É° ·É°·É†·É£·Éö·Éò ·Éì·Éê·Éô·Éê·É†·Éí·Éï·Éê.
    ·Éê·Éû·Éö·Éò·Éô·Éê·É™·Éò·Éê·É®·Éò ·Éõ·Éù·É™·Éî·Éõ·É£·Éö·Éò ·Éû·É†·Éù·Éí·Éú·Éù·Éñ·Éî·Éë·Éò ·Éî·É§·É£·É´·Éú·Éî·Éë·Éê ·É°·É¢·Éê·É¢·Éò·É°·É¢·Éò·Éô·É£·É† ·Éõ·Éù·Éì·Éî·Éö·Éî·Éë·É° ·Éì·Éê ·Éê·É† ·Éê·É†·Éò·É° ·É§·Éò·Éú·Éê·Éú·É°·É£·É†·Éò ·É†·É©·Éî·Éï·Éê.
    ·Éú·Éî·Éë·Éò·É°·Éõ·Éò·Éî·É†·Éò ·É°·Éê·Éò·Éú·Éï·Éî·É°·É¢·Éò·É™·Éò·Éù ·Éí·Éê·Éì·Éê·É¨·Éß·Éï·Éî·É¢·Éò·Éö·Éî·Éë·Éò·É° ·Éõ·Éò·É¶·Éî·Éë·Éê·Éõ·Éì·Éî ·Éß·Éù·Éï·Éî·Éö·Éó·Éï·Éò·É° ·É©·Éê·Éê·É¢·Éê·É†·Éî·Éó ·É°·Éê·Éô·É£·Éó·Éê·É†·Éò ·Éô·Éï·Éö·Éî·Éï·Éê (DYOR - Do Your Own Research)
    ·Éì·Éê ·Éí·Éê·Éò·Éê·É†·Éî·Éó ·Éô·Éù·Éú·É°·É£·Éö·É¢·Éê·É™·Éò·Éê ·Éö·Éò·É™·Éî·Éú·Éñ·Éò·É†·Éî·Éë·É£·Éö ·É§·Éò·Éú·Éê·Éú·É°·É£·É† ·Éî·É•·É°·Éû·Éî·É†·É¢·Éó·Éê·Éú.
    
    ---
    
    **·É®·Éî·É•·Éõ·Éú·Éò·Éö·Éò·Éê:** 2025
    """)

# Auto refresh for live mode
# Ensure this block is at the very end of the script to avoid re-running prematurely
if st.session_state.live_mode:
    time.sleep(auto_refresh)
    st.rerun()
